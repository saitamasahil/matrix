#!/usr/bin/env bash
set -euo pipefail

if [[ "${1:-}" == "--help" ]]; then
    clear
    echo ""
    echo "Matrix Rain CLI Options:"
    echo "  matrix               → Random color rain"
    echo "  matrix --green       → Classic Matrix green"
    echo "  matrix --orange      → Orange rain"
    echo "  matrix --blue        → Blue rain"
    echo "  matrix --red         → Red rain"
    echo "  matrix --cyan        → Cyan rain"
    echo "  matrix --purple      → Purple rain"
    echo "  matrix --sky         → Sky blue rain"
    echo "  matrix --amber       → Amber/orange-yellow rain"
    echo "  matrix --pink        → Pink rain"
    echo "  matrix --sakura      → Cherry blossom pink rain"
    echo "  matrix --ice         → Icy light blue rain"
    echo "  matrix --mint        → Fresh mint rain"
    echo "  matrix --peach       → Peach rain"
    echo "  matrix --lavender    → Light lavender rain"
    echo "  matrix --gold        → Golden yellow rain"
    echo "  matrix --silver      → Silver rain"
    echo "  matrix --rgb         → Red, green, blue rain"
    echo "  matrix --low-power   → Enables low FPS, uses less CPU"
    echo "  matrix --help        → Show this help panel"
    echo ""
    echo "💡 Example for low power mode: matrix --blue --low-power"
    echo ""
    echo "🚨 Press Ctrl+C anytime to exit the Matrix Rain."
    echo ""
    read -n 1 -s -r -p "Press any key to exit..."
    clear
    exit 0
fi

init_term() {
    tput smcup # Enter alternate screen
    tput civis # Hide cursor
    stty -echo
    read -r LINES COLUMNS < <(stty size)
}

deinit_term() {
    pkill -P $$ &>/dev/null || true # Kill children
    tput rmcup                      # Exit alternate screen
    tput cnorm                      # Show cursor
    stty echo
    exit 0
}
trap deinit_term EXIT INT

SYMBOLS='ｱｲｳｴｵｶｷｸｹｺｻｼｽｾｿﾀﾁﾂﾃﾄﾅﾆﾇﾈﾉﾏﾐﾑﾒﾓﾔﾕﾖﾗﾘﾙﾚﾛﾜｦﾝ0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz!@#$%^&*()_+-=<>?/|[]{}□△▽※¤☆♪♫∆∇∞§'

COLOR_MODE="random"
SLEEP_TIME=0.04

if [[ $# -gt 0 ]]; then
    for arg in "$@"; do
        case "$arg" in
        --green) COLOR_MODE="0 255 0" ;;
        --orange) COLOR_MODE="255 179 71" ;;
        --blue) COLOR_MODE="0 120 255" ;;
        --red) COLOR_MODE="255 0 0" ;;
        --cyan) COLOR_MODE="0 255 255" ;;
        --purple) COLOR_MODE="180 0 255" ;;
        --sky) COLOR_MODE="135 206 235" ;;
        --amber) COLOR_MODE="255 191 0" ;;
        --pink) COLOR_MODE="255 105 180" ;;
        --sakura) COLOR_MODE="255 182 193" ;;
        --ice) COLOR_MODE="173 216 230" ;;
        --mint) COLOR_MODE="152 255 152" ;;
        --peach) COLOR_MODE="255 203 164" ;;
        --lavender) COLOR_MODE="200 150 230" ;;
        --gold) COLOR_MODE="255 215 0" ;;
        --silver) COLOR_MODE="220 220 220" ;;
        --rgb) COLOR_MODE="rgb-only" ;;
        --low-power) SLEEP_TIME=0.1 ;;
        --help) ;; # Already handled above
        *)
            echo "Unknown option: $arg"
            exit 1
            ;;
        esac
    done
fi

draw_char_rgb() {
    local row=$1 col=$2 char=$3 r=$4 g=$5 b=$6
    ((row >= 1 && row <= LINES)) && printf '\e[%d;%dH\e[38;2;%d;%d;%dm%s\e[0m' "$row" "$col" "$r" "$g" "$b" "$char"
}

random_drop() {
    sleep 0.$((RANDOM % 3)) # Stagger start time

    local col=$((RANDOM % COLUMNS + 1)) # Use full width
    local len=$((RANDOM % (LINES / 3) + 8))
    local speed=$((RANDOM % 10 + 1))

    local r g b
    if [[ "$COLOR_MODE" == "random" ]]; then
        r=$((RANDOM % 256))
        g=$((RANDOM % 256))
        b=$((RANDOM % 256))
    elif [[ "$COLOR_MODE" == "rgb-only" ]]; then
        case $((RANDOM % 3)) in
        0)
            r=255
            g=0
            b=0
            ;; # Red
        1)
            r=0
            g=255
            b=0
            ;; # Green
        2)
            r=0
            g=0
            b=255
            ;; # Blue
        esac
    else
        read -r r g b <<<"$COLOR_MODE"
    fi

    for ((i = 1; i <= LINES + len; i++)); do
        local char="${SYMBOLS:RANDOM%${#SYMBOLS}:1}"
        draw_char_rgb "$i" "$col" "$char" "$r" "$g" "$b"

        for offset in {1..6}; do
            local fade_r=$((r / (offset + 1)))
            local fade_g=$((g / (offset + 1)))
            local fade_b=$((b / (offset + 1)))
            local trail_row=$((i - offset))
            ((trail_row > 0)) && draw_char_rgb "$trail_row" "$col" "${SYMBOLS:RANDOM%${#SYMBOLS}:1}" "$fade_r" "$fade_g" "$fade_b"
        done

        ((i > len)) && ((i - len <= LINES)) && printf '\e[%d;%dH ' "$((i - len))" "$col"
        sleep "0.0$speed"
    done
}

main() {
    init_term
    while true; do
        (($(jobs -r | wc -l) < COLUMNS / 3)) && random_drop &
        sleep "$SLEEP_TIME"
    done
}

main
